number:
        
  - platform: template
    name: "PV-Manipulate"
    id: manipulate
    mode: slider
    optimistic: true
    unit_of_measurement: "Watt"
    initial_value: 0
    min_value: -500
    max_value: 2000
    step: 10
   
  - platform: template
    name: "Max Ladestrom"
    id: maxloadcurrent
    mode: box
    optimistic: true
    unit_of_measurement: "Ampere"
    initial_value: 10.0
    min_value: 0.0
    max_value: 21
    step: 0.1

  - platform: modbus_controller
    modbus_controller_id: sdm
    #name: "Spannung Einstellen"
    id: voltageset
    address: 0x00
    unit_of_measurement: "Volt"
    min_value: 0
    max_value: 65
    step: 0.01
    value_type: U_WORD
    multiply: 100.0
        
  - platform: modbus_controller
    modbus_controller_id: sdm
    #name: "Strom Einstellen"
    id: currentset
    entity_category: config
    mode: box
    address: 0x01
    unit_of_measurement: "Ampere"
    min_value: 0
    max_value: 20
    step: 0.01
    value_type: U_WORD
    multiply: 100.0
    
  

sensor:

  - platform: homeassistant
    name: "Diamex Verbraucht Sensor von Home Assistant"
    id: shelly_power
    entity_id: sensor.tasmota_sml_power_curr
 
 
 
 
 #      if ((id(currentset).state + (id(powerinout).state / id(actualvoltage).state)<= 0) && (id(batvoltage).state >= ${bat_undervoltage})) {
##   aktueller Ladestrom + StromZähler Strom     kleiner       0
##      return 0
##   aktueller Ladestrom + Stromzähler Strom      größer       als maximaler eingestellter Strom
##      return maxloadcurrent (maximaler eingestellter Strom)
##   wenn beides NICHT Zutrifft, dann
        aktueller Ladestrom + StromZähler Strom
##        RETURN in die ID currentforset
      

  - platform: template
    name: "currentforset"
    id: currentforset 
    lambda: !lambda |-
      if (id(currentset).state + (id(powerinout).state / id(actualvoltage).state)<= 0) {
        return 0; }
      if (id(currentset).state + (id(powerinout).state / id(actualvoltage).state) >= id(maxloadcurrent).state) {
        return id(maxloadcurrent).state;
      } else {
        return id(currentset).state + (id(powerinout).state / id(actualvoltage).state);
      }
    update_interval: 20s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 10
     on_value:
       then:
         - number.set:
             id: currentset
             value: !lambda |-
                return id(currentforset).state;

  
  - platform: template
    #name: "Spannung Setzen"
    id: voltageforset
    lambda: |-
      if (id(currentforset1).state <= 0.5) {
        return ${bat_undervoltage};
      } else {
        return ${bat_loadvoltage};
      }
    update_interval: 0.5ms
    accuracy_decimals: 2
    on_value:
       then:
         - number.set:
             id: voltageset
             value: !lambda |-
                return id(voltageforset).state;

# Minus Übereinspeisung umrechnung in einen positiven Wert
  - platform: template
    name: "Shelly-Power"
    id: powerinout
    lambda: |-
       return (id(shelly_power).state - id(shelly_power).state - id(shelly_power).state) + id(manipulate).state;
    update_interval: 1s
    unit_of_measurement: "Watt"
    accuracy_decimals: 4
    filters:
     - multiply: 1      

  - platform: modbus_controller
    name: "Eingestellte Spannung"
    id: actualvoltage
    address: 0x00
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "V"
    device_class: VOLTAGE
    icon: "mdi:water-percent"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Eingestellter Strom"
    id: actualcurrent
    address: 0x01
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Batterie Spannung"
    id: batvoltage
    address: 0x02
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Aktueller Strom"
    address: 0x03
    register_type: "holding"
    value_type: U_WORD
    device_class: CURRENT
    #unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Ladeleistung"
    address: 0x04
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Watt"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1

  - platform: modbus_controller
    name: "${UIN}"
    address: 0x05
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "Volt"
    device_class: "VOLTAGE"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01
    
 
