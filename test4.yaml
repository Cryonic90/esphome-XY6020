number:
        
  - platform: template
    name: "PV-Manipulate"
    id: manipulate
    mode: slider
    optimistic: true
    unit_of_measurement: "Watt"
    initial_value: 0
    min_value: -500
    max_value: 2000
    step: 10
   
  - platform: template
    name: "Max Ladestrom"
    id: maxloadcurrent
    mode: box
    optimistic: true
    unit_of_measurement: "Ampere"
    initial_value: 10.0
    min_value: 0.0
    max_value: 21
    step: 0.1

  - platform: modbus_controller
    modbus_controller_id: sdm
    #name: "Spannung Einstellen"
    id: voltageset
    address: 0x00
    unit_of_measurement: "Volt"
    min_value: 0
    max_value: 65
    step: 0.01
    value_type: U_WORD
    multiply: 100.0
        
  - platform: modbus_controller
    modbus_controller_id: sdm
    #name: "Strom Einstellen"
    id: currentset
    entity_category: config
    mode: box
    address: 0x01
    unit_of_measurement: "Ampere"
    min_value: 0
    max_value: 20
    step: 0.01
    value_type: U_WORD
    multiply: 100.0
    
  - platform: modbus_controller
    modbus_controller_id: sdm
    name: "Setting Over Voltage Protected"
    mode: box
    force_new_range: true
    address: 0x53
    unit_of_measurement: "Voltage"
    min_value: 0
    max_value: 70
    step: 0.01
    value_type: U_WORD
    multiply: 100.0

  - platform: modbus_controller
    modbus_controller_id: sdm
    name: "Setting Over Current Protected"
    mode: box
    address: 0x54
    unit_of_measurement: "Ampere"
    min_value: 0
    max_value: 21
    step: 0.01
    value_type: U_WORD
    multiply: 100.0

sensor:

  - platform: homeassistant
    name: "Diamex Verbraucht Sensor von Home Assistant"
    id: shelly_power
    entity_id: sensor.tasmota_sml_power_curr
 
 
  - platform: template
    name: "currentforset"
    id: currentforset 
    lambda: !lambda |-
      if ((id(currentset).state + (id(powerinout).state / id(actualvoltage).state)<= 0) && (id(batvoltage).state >= ${bat_undervoltage})) {
        return 0; }
      if (id(currentset).state + (id(powerinout).state / id(actualvoltage).state) >= id(maxloadcurrent).state) {
        return id(maxloadcurrent).state;
      } else {
        return id(currentset).state + (id(powerinout).state / id(actualvoltage).state);
      }
    update_interval: 10s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1

  - platform: template
    name: "Strom zum setzen"
    id: currentforset1
    lambda: |-
      if ((id(batvoltage).state <= ${bat_undervoltage}) && (id(currentforset).state <= 0)) {
        return 0.5;
      } else {
        return id(currentforset).state;
      }
    update_interval: 1s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    on_value:
       then:
         - number.set:
             id: currentset
             value: !lambda |-
                return id(currentforset1).state;


  - platform: template
    #name: "Spannung Setzen"
    id: voltageforset
    lambda: |-
      if (id(currentforset1).state <= 0.5) {
        return ${bat_undervoltage};
      } else {
        return ${bat_loadvoltage};
      }
    update_interval: 1s
    accuracy_decimals: 2
    on_value:
       then:
         - number.set:
             id: voltageset
             value: !lambda |-
                return id(voltageforset).state;

  - platform: template
    name: "Shelly-Power"
    id: powerinout
    lambda: |-
       return (id(shelly_power).state - id(shelly_power).state - id(shelly_power).state) + id(manipulate).state;
    update_interval: 1s
    unit_of_measurement: "Watt"
    accuracy_decimals: 4
    filters:
     - multiply: 1      

  - platform: modbus_controller
    name: "Eingestellte Spannung"
    id: actualvoltage
    address: 0x00
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "V"
    device_class: VOLTAGE
    icon: "mdi:water-percent"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Eingestellter Strom"
    id: actualcurrent
    address: 0x01
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Batterie Spannung"
    id: batvoltage
    address: 0x02
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Aktueller Strom"
    address: 0x03
    register_type: "holding"
    value_type: U_WORD
    device_class: CURRENT
    #unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Ladeleistung"
    address: 0x04
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Watt"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1

  - platform: modbus_controller
    name: "${UIN}"
    #web_server_sorting_weight: 1
    address: 0x05
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "Volt"
    device_class: "VOLTAGE"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01
    

  - platform: modbus_controller
    name: "interne Temperatur"
    #web_server_sorting_weight: 2
    force_new_range: true
    address: 0x0D
    register_type: "holding"
    value_type: U_WORD
    device_class: "TEMPERATURE"
    unit_of_measurement: "Â°C"
    icon: "mdi:thermometer"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1
    
text_sensor:
  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x10
    raw_encode: HEXBYTES
    name: "Protect Status"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("Normal");
        case 0001: return std::string("Over Voltage");
        case 0002: return std::string("Over Current");
        case 0003: return std::string("OPP");
        case 0004: return std::string("LVP");
        case 0005: return std::string("OAH");
        case 0006: return std::string("OHP");
        case 0007: return std::string("OTP");
        default: return std::string("Unknown");
      }
      return x;
  
  

#      } else if (id(protectsensor).state == 8) {
#        return {"${OEP}"};
#      } else if (id(protectsensor).state == 9) {
#        return {"${OWH}"};
#      } else if (id(protectsensor).state == 10) {
#        return {"${ICP}"};



  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x11
    raw_encode: HEXBYTES
    name: "CV CC"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("CV");
        case 0001: return std::string("CC");
        default: return std::string("Unknown");
      }
      return x;


  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x12
    raw_encode: HEXBYTES
    name: "Power Switch On Off"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("OFF");
        case 0001: return std::string("On");
        default: return std::string("Unknown");
      }
      return x;
    
  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x0F
    raw_encode: HEXBYTES
    name: "Key Lock"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("unlock");
        case 0001: return std::string("locked");
        default: return std::string("Unknown");
      }
      return x;

