substitutions:
  updateinterval: "10s"
  i_set_temp_min: "0"
  i_set_temp_max: "95"
  bat_loadvoltage: "28.2"    # Loadvoltage for Battery
  bat_undervoltage: "23"     # Minimum Bat Voltage 
  bat_holdvoltage: "27.4"    # Voltage to hold Loading
  bat_loadvoltagepv0: "25"
  max_load_current: "20"     # Maximaler Ladestrom fix in Ampere ${max_load_current} XY6020 MAximal 21
  Wirkungsgrad: "0.8"
  
 
esphome:
  name: batterie-ladung-esp
  friendly_name: Batterie_Ladung_ESP

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "U0J68uVzH5365w4xBO6ghh9/Bxkm7v6J6USPnTnzQvc="

ota:
  - platform: esphome
    password: "5057746ff1ac7afa41602337d4162dab"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Batterie-Ladung-Esp"
    password: "78maR0o74aCT"

captive_portal:



uart:
  - id: uart_bus2
    tx_pin:  GPIO17  #{tx_pin}
    rx_pin:  GPIO16  #{rx_pin}
    baud_rate: 115200
    stop_bits: 1
    parity: NONE
    debug:
      direction: BOTH
      dummy_receiver: true

modbus:
  send_wait_time: 1s
  uart_id: uart_bus2
  id: mod_bus

modbus_controller:
  - id: sdm
    address: 1
    modbus_id: mod_bus
    #command_throttle: 0ms
    setup_priority: -10
    update_interval: 10s


number:
  - platform: modbus_controller
    modbus_controller_id: sdm
    id: protectclear
    address: 0x10
    min_value: 0
    max_value: 1
    step: 1
    value_type: U_WORD
 
  - platform: template
    name: "Wirkungsgrad"
    id: Wirkungsgrad
    mode: box
    optimistic: true
    initial_value: 0.8
    min_value: 0.5
    max_value: 1
    step: 0.01
    
  - platform: template
    name: "PV-Manipulate"
    id: manipulate
    mode: slider
    optimistic: true
    unit_of_measurement: "Watt"
    initial_value: -5
    min_value: -50
    max_value: 50
    step: 5 
   
  - platform: template
    name: "Max Ladestrom"
    id: maxloadcurrent
    mode: box
    optimistic: true
    unit_of_measurement: "Ampere"
    initial_value: 4.0
    min_value: 0.0
    max_value: 20
    step: 0.1

  - platform: modbus_controller
    modbus_controller_id: sdm
    #name: "Spannung Einstellen"
    id: voltageset
    address: 0x00
    unit_of_measurement: "Volt"
    min_value: 0
    max_value: 65
    step: 0.1
    value_type: U_WORD
    multiply: 100.0
        
  - platform: modbus_controller
    modbus_controller_id: sdm
    #name: "Strom Einstellen"
    id: currentset
    entity_category: config
    mode: box
    address: 0x01
    unit_of_measurement: "Ampere"
    min_value: 0
    max_value: 20
    step: 0.1
    value_type: U_WORD
    multiply: 100.0
    
  - platform: modbus_controller
    modbus_controller_id: sdm
    name: "Setting Over Voltage Protected"
    mode: box
    force_new_range: true
    address: 0x53
    unit_of_measurement: "Voltage"
    min_value: 0
    max_value: 70
    step: 0.1
    value_type: U_WORD
    multiply: 100.0

  - platform: modbus_controller
    modbus_controller_id: sdm
    name: "Setting Over Current Protected"
    mode: box
    address: 0x54
    unit_of_measurement: "Ampere"
    min_value: 0
    max_value: 20
    step: 0.1
    value_type: U_WORD
    multiply: 100.0

sensor:

  - platform: homeassistant
    name: "Diamex Verbraucht Sensor von Home Assistant"
    id: diamex_power
    entity_id: sensor.tasmota_sml_power_curr
 
 
  - platform: template
    name: "currentforset"
    id: currentforset 
    lambda: !lambda |-
      if ((id(currentset).state + (id(powerinout).state / id(actualvoltage).state)<= 0) && (id(batvoltage).state >= ${bat_undervoltage})) {
        return 0; }
      if (id(currentset).state + (id(powerinout).state / id(actualvoltage).state) >= id(maxloadcurrent).state) {
        return id(maxloadcurrent).state;
      } else {
        return id(currentset).state  + ((id(powerinout).state / id(actualvoltage).state) * id(Wirkungsgrad).state);
      }
    update_interval: 10s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    on_value:
       then:
         - number.set:
             id: currentset
             value: !lambda |-
                return id(currentforset).state;


  - platform: template
    #name: "Spannung Setzen"
    id: voltageforset
    lambda: |-
      if (id(currentforset).state == 0) {
        return ${bat_holdvoltage};
      } else {
        return ${bat_loadvoltage};
      }
    update_interval: 1s
    accuracy_decimals: 2
    on_value:
       then:
         - number.set:
             id: voltageset
             value: !lambda |-
                return id(voltageforset).state;


  - platform: template
    name: "Diamex Power negiert"
    id: powerinout
    lambda: |-
       return (id(diamex_power).state - id(diamex_power).state - id(diamex_power).state) + id(manipulate).state;
    update_interval: 1s
    unit_of_measurement: "Watt"
    accuracy_decimals: 4
    filters:
     - multiply: 1      

  - platform: modbus_controller
    name: "Eingestellte Spannung"
    id: actualvoltage
    address: 0x00
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "V"
    device_class: VOLTAGE
    icon: "mdi:water-percent"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Eingestellter Strom"
    id: actualcurrent
    address: 0x01
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Batterie Spannung"
    id: batvoltage
    address: 0x02
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Aktueller Strom"
    address: 0x03
    register_type: "holding"
    value_type: U_WORD
    device_class: CURRENT
    #unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Ladeleistung"
    address: 0x04
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Watt"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1

  - platform: modbus_controller
    name: "Eingangsspannung"
    #web_server_sorting_weight: 1
    address: 0x05
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "Volt"
    device_class: "VOLTAGE"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01
    

  - platform: modbus_controller
    name: "interne Temperatur"
    #web_server_sorting_weight: 2
    force_new_range: true
    address: 0x0D
    register_type: "holding"
    value_type: U_WORD
    device_class: "TEMPERATURE"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1
    
text_sensor:
  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x10
    raw_encode: HEXBYTES
    name: "Protect Status"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("Normal");
        case 0001: return std::string("Überspannung");
        case 0002: return std::string("Überstrom");
        case 0003: return std::string("Überleistung");
        case 0004: return std::string("Unterspannung");
        case 0005: return std::string("Maximal Ausgang Amper/Stunden");
        case 0006: return std::string("Maximal Ausgangzeit");
        case 0007: return std::string("Übertemperatur");
        default: return std::string("Unknown");
      }
      return x;
  

  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x11
    raw_encode: HEXBYTES
    name: "CV CC"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("CV");
        case 0001: return std::string("CC");
        default: return std::string("Unknown");
      }
      return x;


  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x12
    raw_encode: HEXBYTES
    name: "Power Switch On Off"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("Aus");
        case 0001: return std::string("An");
        default: return std::string("Unknown");
      }
      return x;
    
  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x0F
    raw_encode: HEXBYTES
    name: "Tastensperre"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("Offen");
        case 0001: return std::string("Gesperrt");
        default: return std::string("Unbekannt");
      }
      return x;

switch:
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Tastensperre"
     id: keylockswitch
     register_type: holding
     address: 0x0F
     bitmask: 1
     entity_category: config
     icon: "mdi:toggle-switch"

   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "EIN-AUS Schalter"
     id: onoff
     register_type: holding
     address: 0x12
     bitmask: 1
     entity_category: config
     icon: "mdi:toggle-switch"

   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Grad - Farendheit"
     register_type: holding
     address: 0x13
     bitmask: 1
     entity_category: config
     icon: "mdi:toggle-switch"
     
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Sleep"
     register_type: holding
     address: 0x15
     bitmask: 1
     entity_category: config
     icon: "mdi:toggle-switch"
    
    
