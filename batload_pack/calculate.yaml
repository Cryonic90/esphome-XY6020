



sensor:
  - platform: template
    name: "currentforset"
    id: currentforset 
    lambda: !lambda |-
      if ((id(currentset).state + (id(powerinout).state / id(actualvoltage).state)<= 0) && (id(batvoltage).state >= id(underbatvolt).state)) {
        return 0; }
      if (id(currentset).state + (id(powerinout).state / id(actualvoltage).state) >= 10) {
        return id(maxloadcurrent).state;
      } else {
        return id(currentset).state + (id(powerinout).state / id(actualvoltage).state);
      }
    update_interval: 10s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    

  - platform: template
    name: "Strom zum setzen"
    id: currentforset1
    lambda: |-
      if ((id(batvoltage).state <= id(underbatvolt).state) && (id(currentforset).state <= 0)) {
        return 0.5;
      } else {
        return id(currentforset).state;
      }
    update_interval: 1s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    on_value:
       then:
         - number.set:
             id: currentset
             value: !lambda |-
                return id(currentforset1).state;


  - platform: template
    name: "Spannung Setzen"
    id: voltageforset
    lambda: |-
      if (id(currentforset1).state <= 0.5) {
        return 24.5;
      } else {
        return 29;
      }
    update_interval: 1s
    accuracy_decimals: 2
    on_value:
       then:
         - number.set:
             id: voltageset
             value: !lambda |-
                return id(voltageforset).state;

  - platform: homeassistant
    id: shelly_power
    entity_id: ${powermess}
    unit_of_measurement: "W"
    accuracy_decimals: 4
    filters:
     - multiply: 1 

  - platform: template
    name: "Shelly-Power"
    id: powerinout
    lambda: |-
       return id(shelly_power).state - id(shelly_power).state - id(shelly_power).state;
    update_interval: 1s
    unit_of_measurement: "Watt"
    accuracy_decimals: 4
    filters:
     - multiply: 1      
