sensor:
  
  - platform: template
    #name: "Ladestrom zum setzen2"
    id: currentforset2
    lambda: |-
      if (id(currentset).state + ((id(powerinout).state - id(powerinout).state - id(powerinout).state) / id(actualvoltage).state) <= 0) {
        return 0;
      } else {
        return id(currentset).state + ((id(powerinout).state - id(powerinout).state - id(powerinout).state) / id(actualvoltage).state);
      }
    update_interval: ${updateinterval}
    unit_of_measurement: "Ampere"
    accuracy_decimals: 4
    filters:
     - multiply: 1  
    
  - platform: template
    #name: "Ladestrom zum setzen3"
    id: currentforset3
    lambda: |-
      if (id(currentforset2).state >= id(maxloadcurrent).state) {
        return id(maxloadcurrent).state;
      } else {
        return (id(currentforset2).state);
      }
    update_interval: ${updateinterval}
    unit_of_measurement: "Ampere"
    accuracy_decimals: 4
    filters:
     - multiply: 1

  - platform: template
    name: "Strom zum setzen"
    id: currentset1
    lambda: |-
      if (id(batvoltage).state <= 24.5) {
        return 0.5;
      } else {
        return id(currentforset3).state;
      }
    update_interval: 1s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    on_value:
       then:
         - number.set:
             id: currentset
             value: !lambda |-
                return id(currentset1).state;
         

  - platform: homeassistant
    id: shelly_power
    entity_id: ${powermess}
    unit_of_measurement: "W"
    accuracy_decimals: 4
    filters:
     - multiply: 1 

  - platform: template
    name: "Shelly-Power"
    id: powerinout
    lambda: |-
       return (id(shelly_power).state);
    update_interval: 0.5s
    unit_of_measurement: "Watt"
    accuracy_decimals: 4
    filters:
     - multiply: 1      

  - platform: modbus_controller
    name: "Eingestellte Spannung"
    id: actualvoltage
    address: 0x00
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "V"
    icon: "mdi:water-percent"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Eingestellter Strom"
    id: actualcurrent
    address: 0x01
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Batterie Spannung"
    id: batvoltage
    address: 0x02
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 4
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Aktueller Strom"
    address: 0x03
    register_type: "holding"
    value_type: U_WORD
    device_class: CURRENT
    #unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Leistung am Ausgang"
    address: 0x04
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Watt"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1

  - platform: modbus_controller
    name: "Eingangsspannung"
    address: 0x05
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Volt"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    id: protect_state
    force_new_range: true
    address: 0x10
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Status"
    accuracy_decimals: 0
    filters:
     - multiply: 1

  - platform: modbus_controller
    name: "interne Temperatur"
    force_new_range: true
    address: 0x0D
    register_type: "holding"
    value_type: U_WORD
    device_class: TEMPERATURE
    #unit_of_measurement: "Celsius"
    icon: "mdi:thermometer"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1
