sensor:
  - platform: template
    name: "currentforset"
    id: currentforset 
    lambda: !lambda |-
      if ((id(currentset).state + (id(powerinout).state / id(actualvoltage).state)<= 0) && (id(batvoltage).state >= id(underbatvolt).state)) {
        return 0; }
      if (id(currentset).state + (id(powerinout).state / id(actualvoltage).state) >= 5) {
        return id(maxloadcurrent).state;
      } else {
        return id(currentset).state + (id(powerinout).state / id(actualvoltage).state);
      }
    update_interval: 10s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    

  - platform: template
    name: "Strom zum setzen"
    id: currentforset1
    lambda: |-
      if ((id(batvoltage).state <= id(underbatvolt).state) && (id(currentforset).state <= 0)) {
        return 0.5;
      } else {
        return id(currentforset).state;
      }
    update_interval: 10s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    on_value:
       then:
         - number.set:
             id: currentset
             value: !lambda |-
                return id(currentforset1).state;


#  - platform: template
#    name: "Spannung Setzen"
#    id: voltageforset
#    lambda: |-
#      if (id(currentforset1).state <= 0) {
#        return 24.5;
#      } else {
#        return 29;
#      }
#    update_interval: 10s
#    unit_of_measurement: "Voltage"
#    accuracy_decimals: 2
#    filters:
#     - multiply: 1
#    on_value:
#       then:
#         - number.set:
#             id: voltageset
#             value: !lambda |-
#                return id(voltageforset).state;

  - platform: homeassistant
    id: shelly_power
    entity_id: ${powermess}
    unit_of_measurement: "W"
    accuracy_decimals: 4
    filters:
     - multiply: 1 

  - platform: template
    name: "Shelly-Power"
    id: powerinout
    lambda: |-
       return id(shelly_power).state - id(shelly_power).state - id(shelly_power).state;
    update_interval: 1s
    unit_of_measurement: "Watt"
    accuracy_decimals: 4
    filters:
     - multiply: 1      

  - platform: modbus_controller
    name: "Eingestellte Spannung"
    id: actualvoltage
    address: 0x00
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "V"
    device_class: VOLTAGE
    icon: "mdi:water-percent"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Eingestellter Strom"
    id: actualcurrent
    address: 0x01
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Batterie Spannung"
    id: batvoltage
    address: 0x02
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Aktueller Strom"
    address: 0x03
    register_type: "holding"
    value_type: U_WORD
    device_class: CURRENT
    #unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Leistung am Ausgang"
    address: 0x04
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Watt"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1

  - platform: modbus_controller
    name: "Eingangsspannung"
    address: 0x05
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "Volt"
    device_class: VOLTAGE
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "interne Temperatur"
    force_new_range: true
    address: 0x0D
    register_type: "holding"
    value_type: U_WORD
    device_class: "TEMPERATURE"
    unit_of_measurement: "Â°C"
    icon: "mdi:thermometer"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1


  
