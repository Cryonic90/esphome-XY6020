text_sensor:
  
  #- platform: template
  #  name: Current_time
  #  lambda: |-
  #    auto time_text = id(sntp_time).now().strftime("%d.%m.%Y %H:%M:%S");
  #    return { time_text };
  #  update_interval: 60s
  

  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x0F
    raw_encode: HEXBYTES
    name: " TEST Key Lock"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("unlock");
        case 0001: return std::string("lock");
        default: return std::string("Unknown");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x11
    raw_encode: HEXBYTES
    name: "CC CV"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("CV");
        case 1: return std::string("CC");
        default: return std::string("Unknown");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x12
    raw_encode: HEXBYTES
    name: "Power Switch On Off"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("off");
        case 0001: return std::string("on");
        default: return std::string("Unknown");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x10
    raw_encode: HEXBYTES
    name: "Protect Status"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("Normal");
        case 0001: return std::string("Over Voltage");
        case 0002: return std::string("Over Current");
        case 0003: return std::string("OPP");
        case 0004: return std::string("LVP");
        case 0005: return std::string("OAH");
        case 0006: return std::string("OHP");
        case 0007: return std::string("OTP");
        default: return std::string("Unknown");
      }
      return x;

