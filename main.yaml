substitutions:
  name: "xy6020"
  device_description: "Monitor and control a xy6020 Digital Control Power Supply via UART-TTL"
          # Register
  # 0x00           # Voltage Setting          Volt    R/W
  # 0x01           # Current Setting          Ampere  R/W
  # 0x02"          # Voltage value display    Voltage  R
  # 0x03           # Current value display    Ampere   R
  # 0x04           # Power in Watt Output     Watt     R
  # 0x05           # Input Voltage            Voltage  R
  AH_LOW: "0x06"   # Output AH low 16 bits    mAH      R
  AH_HIGH: "0x07"  # Output AH high 16 bits   mAH      R
  WH_LOW: "0x08"   # Output WH low 16 bits    mWH      R
  WH_HIGH: "0x09"  # Output WH high 16 bits   mWH      R
  # OUT_H  0x0A    # Open Time Hours          Hours    R
  # OUT_M  0x0B    # Open Time Minutes        Minutes  R
  # OUT_S  0x0C    # Open Time Seconds        Seconds  R
  # t_in   0x0D    # internal temperatur      Celsius  R
  # t_ex:  0x0E    # externe temeratur        Celsius  R   external Sensor needed
  lock: "0x0F"     # Key Lock                         R/W
      # 0 = unlock
      # 1 = lock
  PROTECT: "0x10"  # Protect Status           Status   R  
      # 0 = normal
      # 1 = OVP  Over Voltage Protected
      # 2 = OCP  Over Current Protected
      # 3 = OPP  Over Power Protected
      # 4 = LVP
      # 5 = OAH
      # 6 = OHP
      # 7 = OTP  Over tempreture Protected
      # 8 = OEP
      # 9 = OWH
      #10 = ICP
  CVCC: "0x11"     # Constant voltage and constant current   Stage R
  ONOFF: "0x12"
  baudrate: "0x19" # baudrate                         R/W
      # 0 = ?
      # 1 = ?
      # 2 = ?
      # 3 = ?
      # 4 = ?
      # 5 = ?
      # 6 = 115200
  sleep: "0x15"    #  ??
  model: "0x16"    #  Model
  # 0x17                 #  Version
  M050: "0x50"
  M051: "0x51"
  M052: "0x52"
  M053: "0x53"
  M054: "0x54"
  M055: "0x55"    # Over power protection value
  M056: "0x56"
  M057: "0x57"    # Maximum output durationâ€”minutes
  M058: "0x58"
  M059: "0x59"
  M05C: "0x5C"     # Over Temperatur Protect Set     Celsius    R/W
   
  V_set_max: "30"
  V_set_min: "24"
  V_set_step: "0.1"
  i_set_max: "10"
  i_set_min: "0.2"
  i_set_step: "0.1"
  u_set_OVP_max: "65"
  u_set_OVP_min: "0"
  i_set_OVP_max: "21"
  i_set_OVP_min: "0"
  i_set_temp_min: "0"
  i_set_temp_max: "95"

esphome:
  name: ${name}
 # friendly_name: xy6020
  comment: ${device_description}

esp32:
  board: nodemcu-32s

#web_server:
#  port: 9005

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: !secret xy6020_IP
    gateway: !secret gateway
    subnet: !secret subnet

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "xy6020 Fallback Hotspot"
    password: "UEikMwV1wqU8"

ota:
  password: !secret xyota

logger:
  level: DEBUG

api:

uart:
  - id: uart_bus1
    tx_pin: GPIO4
    rx_pin: GPIO2
    baud_rate: 115200
    stop_bits: 1
    parity: NONE
    debug:
      direction: BOTH
      dummy_receiver: true

modbus:
  #send_wait_time: 200ms
  uart_id: uart_bus1
  id: mod_bus

modbus_controller:
  - id: sdm
    address: 1
    modbus_id: mod_bus
    #command_throttle: 0ms
    setup_priority: -10
    update_interval: 10s

packages:
  remote_package:
    url: https://github.com/creepystefan/esphome-XY6020
    refresh: 0d
    files: [
      yml/sensors.yaml
      ]

captive_portal:

number:
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Spannung Einstellen"
     mode: box
     address: 0x00
     unit_of_measurement: "Volt"
     min_value: ${V_set_min}
     max_value: ${V_set_max}
     step: ${V_set_step}
     value_type: U_WORD
     multiply: 100.0
   
   
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Strom Einstellen"
     mode: box
     address: 0x01
     unit_of_measurement: "Ampere"
     min_value: ${i_set_min}
     max_value: ${i_set_max}
     step: ${i_set_step}
     value_type: U_WORD
     multiply: 100.0

   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "M053 Setting Over Voltage Protected"
     mode: box
     address: ${M053}
     unit_of_measurement: "Voltage"
     min_value: ${u_set_OVP_min}
     max_value: ${u_set_OVP_max}
     step: ${i_set_step}
     value_type: U_WORD
     multiply: 100.0

   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "M053 Setting Over Current Protected"
     address: ${M054}
     unit_of_measurement: "Ampere"
     min_value: ${i_set_OVP_min}
     max_value: ${i_set_OVP_max}
     step: ${i_set_step}
     value_type: U_WORD
     multiply: 100.0

   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Over Temperatur Protect Set"
     address: ${M05C}
     unit_of_measurement: "Celsius"
     min_value: ${i_set_temp_min}
     max_value: ${i_set_temp_max}
     step: ${i_set_step}
     value_type: U_WORD
     multiply: 1

switch:
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Key Lock"
     id: keylock
     register_type: holding
     address: ${lock}
     bitmask: 1
     entity_category: config
     icon: "mdi:toggle-switch"

   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "EIN-AUS Schalter"
     id: onoff
     register_type: holding
     address: 0x12
     bitmask: 1
     entity_category: config
     icon: "mdi:toggle-switch"  
     
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Sleep"
     register_type: holding
     address: ${sleep}
     bitmask: 1
     entity_category: config
     icon: "mdi:toggle-switch"

text_sensor:
  - platform: template
    name: "Tastensperre"
    lambda: |-
      if (id(keylock).state) {
        return {"locked"};
      } else {
        return {"unlock"};
      }
    update_interval: 10s

  - platform: template
    name: "Protect Status Text"
    lambda: |-
      if (id(protect_state).state == 0) {
        return {"Normal"};  
      } else if(id(protect_state).state == 1) {
        return {"Over Voltage Protected"};
      } else if(id(protect_state).state == 2) {
        return {"Over Current Protected"};
      } else if(id(protect_state).state == 3) {
        return {"Over Power Protected"};
      } else if(id(protect_state).state == 4) {
        return {"LVP"};
      } else if(id(protect_state).state == 5) {
        return {"OAH"};  
      } else if(id(protect_state).state == 6) {
        return {"OHP"};
      } else if(id(protect_state).state == 7) {
        return {"Over Tempreture Protected"};
      } else if(id(protect_state).state == 8) {
        return {"OEP"};
      } else if(id(protect_state).state == 9) {
        return {"OWH"};
      } else if(id(protect_state).state == 10) {
        return {"ICP"};
      } else {
        return {"Error"};
      }
    update_interval: 5s
