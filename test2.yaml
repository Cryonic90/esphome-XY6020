substitutions:
  friendly_name: ""
  tx_pin: "GPIO17"
  rx_pin: "GPIO16"
  #powermess: !secret powmess
  updateinterval: "15s"
  i_set_temp_min: "0"
  i_set_temp_max: "95"
  bat_loadvoltage: "28"    # Loadvoltage for Battery
  bat_undervoltage: "23"   # Minimum Bat Voltage 
  bat_holdvoltage: "27.4"  # Voltage to hold Loading
  bat_loadvoltagepv0: "25"
  #DiamaxIP: "192.168.178.46"                              ### IP Adresse von Tasmota
  #interval: "1s"  # Interval Time for Request
  V_SET: "Spannung Einstellen"   # 0x00
  C_SET: "Strom Einstellen"      # 0x01
  VOUT: "Spannung Ausgang"       # 0x02
  IOUT: "Strom Ausgang"          # 0x03
  POWER: "Leistung Ausgang"      # 0x04
  UIN: "Eingangsspannung"        # 0x05
  t_in: "Temperatur intern"      # 0x0D
  t_ex: "Temperatur extern"      # 0x0D   need external Sensor
#  M052: ""                            # 0x52
#  M053: ""                             # 0x53
#  M054: "0x54"
#  M055: "Over power protection value"      # 0x55
#  M056: "0x56"
#  M057: "Maximum output duration—minutes"  # 0x57
#  M058: "0x58"
#  M059: "0x59"
#  M05C: "Schutz Übertemperatur Grenze"  # 0x5C  
  
  PROTECT: "Schutz Status"             # 0x10
  normal: "Normal"                     # 0
  OVP: "Überspannung"                  # 1
  OCP: "Überstrom"                     # 2
  OPP: "Überleistung"                  # 3
  LVP: "Unterspannung"                 # 4
  OAH: "Maximal Ausgang Amper/Stunden" # 5
  OHP: "Maximal Ausgangzeit"           # 6
  OTP: "Übertemperatur"                # 7
  OEP: "OEP"                           # 8
  OWH: "Maximum output WattHours"      # 9
  ICP: "ICP"                           #10

  LOCK: "Tastensperre"   #
  unlock: "offen"        #  0
  locked: "Geschützt"    #  1

#esphome:
#esp32:
#modbus_controller
#uart:
#web:
#captive_portal:
#.......


number:
   - platform: modbus_controller
     modbus_controller_id: sdm
     id: protectclear
     address: 0x10
     min_value: 0
     max_value: 1
     step: 1
     value_type: U_WORD
        
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Setting Over Voltage Protected"
     mode: box
     address: 0x53
     unit_of_measurement: "Voltage"
     min_value: 0
     max_value: 70
     step: 0.1
     value_type: U_WORD
     multiply: 100.0
      
   - platform: template
     name: "PV-Manipulate"
     id: manipulate
     mode: slider
     optimistic: true
     unit_of_measurement: "Watt"
     initial_value: 0
     min_value: -500
     max_value: 2000
     step: 10
   
   - platform: template
     name: "Max Ladestrom"
     id: maxloadcurrent
     mode: box
     optimistic: true
     unit_of_measurement: "Ampere"
     initial_value: 10.0
     min_value: 0.0
     max_value: 21
     step: 0.1

   - platform: modbus_controller
     modbus_controller_id: sdm
     #name: "Spannung Einstellen"
     id: voltageset
     address: 0x00
     unit_of_measurement: "Volt"
     min_value: 0
     max_value: 65
     step: 0.01
     value_type: U_WORD
     multiply: 100.0
        
   - platform: modbus_controller
     modbus_controller_id: sdm
     #name: "Strom Einstellen"
     id: currentset
     entity_category: config
     mode: box
     address: 0x01
     unit_of_measurement: "Ampere"
     min_value: 0
     max_value: 20
     step: 0.01
     value_type: U_WORD
     multiply: 100.0
    
   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Setting Over Voltage Protected"
     mode: box
     force_new_range: true
     address: 0x53
     unit_of_measurement: "Voltage"
     min_value: 0
     max_value: 70
     step: 0.01
     value_type: U_WORD
     multiply: 100.0

   - platform: modbus_controller
     modbus_controller_id: sdm
     name: "Setting Over Current Protected"
     mode: box
     address: 0x54
     unit_of_measurement: "Ampere"
     min_value: 0
     max_value: 21
     step: 0.01
     value_type: U_WORD
     multiply: 100.0

sensor:

  - platform: homeassistant
    name: "Diamex Verbraucht Sensor von Home Assistant"
    id: shelly_power
    entity_id: sensor.tasmota_sml_power_curr
 
 
  - platform: template
    name: "currentforset"
    id: currentforset 
    lambda: !lambda |-
      if ((id(currentset).state + (id(powerinout).state / id(actualvoltage).state)<= 0) && (id(batvoltage).state >= ${bat_undervoltage})) {
        return 0; }
      if (id(currentset).state + (id(powerinout).state / id(actualvoltage).state) >= id(maxloadcurrent).state) {
        return id(maxloadcurrent).state;
      } else {
        return id(currentset).state + (id(powerinout).state / id(actualvoltage).state);
      }
    update_interval: 10s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1

  - platform: template
    name: "Strom zum setzen"
    id: currentforset1
    lambda: |-
      if ((id(batvoltage).state <= ${bat_undervoltage}) && (id(currentforset).state <= 0)) {
        return 0.5;
      } else {
        return id(currentforset).state;
      }
    update_interval: 1s
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 1
    on_value:
       then:
         - number.set:
             id: currentset
             value: !lambda |-
                return id(currentforset1).state;


  - platform: template
    #name: "Spannung Setzen"
    id: voltageforset
    lambda: |-
      if (id(currentforset1).state <= 0.5) {
        return ${bat_undervoltage};
      } else {
        return ${bat_loadvoltage};
      }
    update_interval: 1s
    accuracy_decimals: 2
    on_value:
       then:
         - number.set:
             id: voltageset
             value: !lambda |-
                return id(voltageforset).state;

  - platform: template
    #name: "Schelly Power weis nicht warum"
    id: shelly_power

  - platform: template
    name: "Shelly-Power"
    id: powerinout
    lambda: |-
       return (id(shelly_power).state - id(shelly_power).state - id(shelly_power).state) + id(manipulate).state;
    update_interval: 1s
    unit_of_measurement: "Watt"
    accuracy_decimals: 4
    filters:
     - multiply: 1      

  - platform: modbus_controller
    name: "Eingestellte Spannung"
    id: actualvoltage
    address: 0x00
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "V"
    device_class: VOLTAGE
    icon: "mdi:water-percent"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Eingestellter Strom"
    id: actualcurrent
    address: 0x01
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Batterie Spannung"
    id: batvoltage
    address: 0x02
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Aktueller Strom"
    address: 0x03
    register_type: "holding"
    value_type: U_WORD
    device_class: CURRENT
    #unit_of_measurement: "Ampere"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01

  - platform: modbus_controller
    name: "Ladeleistung"
    address: 0x04
    register_type: "holding"
    value_type: U_WORD
    unit_of_measurement: "Watt"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1

  - platform: modbus_controller
    name: "${UIN}"
    #web_server_sorting_weight: 1
    address: 0x05
    register_type: "holding"
    value_type: U_WORD
    #unit_of_measurement: "Volt"
    device_class: "VOLTAGE"
    accuracy_decimals: 2
    filters:
     - multiply: 0.01
    

  - platform: modbus_controller
    name: "interne Temperatur"
    #web_server_sorting_weight: 2
    force_new_range: true
    address: 0x0D
    register_type: "holding"
    value_type: U_WORD
    device_class: "TEMPERATURE"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    accuracy_decimals: 2
    filters:
     - multiply: 0.1
    
text_sensor:
  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x10
    raw_encode: HEXBYTES
    name: "Protect Status"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("Normal");
        case 0001: return std::string("Over Voltage");
        case 0002: return std::string("Over Current");
        case 0003: return std::string("OPP");
        case 0004: return std::string("LVP");
        case 0005: return std::string("OAH");
        case 0006: return std::string("OHP");
        case 0007: return std::string("OTP");
        default: return std::string("Unknown");
      }
      return x;
  
  

#      } else if (id(protectsensor).state == 8) {
#        return {"${OEP}"};
#      } else if (id(protectsensor).state == 9) {
#        return {"${OWH}"};
#      } else if (id(protectsensor).state == 10) {
#        return {"${ICP}"};



  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x11
    raw_encode: HEXBYTES
    name: "CV CC"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("CV");
        case 0001: return std::string("CC");
        default: return std::string("Unknown");
      }
      return x;


  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x12
    raw_encode: HEXBYTES
    name: "Power Switch On Off"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("OFF");
        case 0001: return std::string("On");
        default: return std::string("Unknown");
      }
      return x;
    
  - platform: modbus_controller
    modbus_controller_id: sdm
    bitmask: 0
    register_type: holding
    address: 0x0F
    raw_encode: HEXBYTES
    name: "Key Lock"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0000: return std::string("unlock");
        case 0001: return std::string("locked");
        default: return std::string("Unknown");
      }
      return x;
 

    
  
    
    
    

  
