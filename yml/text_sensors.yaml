text_sensor:
  - platform: modbus_controller
    modbus_controller_id: sdm
    name: baudrate
    id: baudrate_status
    register_type: holding
    address: 0x19
    #register_count: 0
    raw_encode: HEXBYTES
    filters:
      lambda: |-
        if(x == "0000") {
          return {"?"};
        } else if(x == "0001") {
          return {"?"};
        } else if(x == "0002") {
          return {"?"};
        } else if(x == "0003") {
          return {"?"};
        } else if(x == "0004") {
          return {"?"};
        } else if(x == "0005") {
          return {"?"};
        } else if(x == "0006") {
          return {"115200"};  
        } else {
          return {"Error"};
        }
        
  - platform: modbus_controller
    modbus_controller_id: sdm
    name: "Power ON OFF"
    register_type: holding
    address: 0x12
    bitmask: 1
    raw_encode: HEXBYTES
    filters:
      lambda: |-
        if(x == "0000") {
          return {"OFF"};  
        } else if(x == "0001") {
          return {"ON"};
        } else {
          return {"Error"};
        }

  - platform: modbus_controller
    modbus_controller_id: sdm
    name: "CV / CC"
    register_type: holding
    address: 0x12
    bitmask: 1
    raw_encode: HEXBYTES
    filters:
      lambda: |-
        if(x == "0000") {
          return {"CV"};  
        } else if(x == "0001") {
          return {"CC"};
        } else {
          return {"Error"};
        }      

  - platform: modbus_controller
    modbus_controller_id: sdm
    name: Key Lock Switch
    register_type: holding
    address: 0x0F
    bitmask: 1
    raw_encode: HEXBYTES
    filters:
      lambda: |-
        if(x == "00000000") {
          return {"unlock"};  
        } else if(x == "00010000") {
          return {"locked"};
        } else {
          return {"Error"};
        }

  - platform: modbus_controller
    modbus_controller_id: sdm
    name: Protect Status
    register_type: holding
    address: 0x10
    raw_encode: HEXBYTES
    filters:
      lambda: |-
        if (x == "0000") {
          return {"Normal"};  
        } else if(x == "0001") {
          return {"Over Voltage Protected"};
        } else if(x == "0002") {
          return {"Over Current Protected"};
        } else if(x == "0003") {
          return {"Over Power Protected"};
        } else if(x == "0004") {
          return {"LVP"};
        } else if(x == "0005") {
          return {"OAH"};  
        } else if(x == "0006") {
          return {"OHP"};
        } else if(x == "0007") {
          return {"Over Tempreture Protected"};
        } else if(x == "0008") {
          return {"OEP"};
        } else if(x == "0009") {
          return {"OWH"};
        } else if(x == "0010") {
          return {"ICP"};
        } else {
          return {"Error"};
        }

  
  
